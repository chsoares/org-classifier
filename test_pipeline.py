#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Teste do Pipeline Principal - Vers√£o Simplificada
"""

import sys
from pathlib import Path

# Adicionar src ao path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from pipeline.main_processor import MainProcessor


def test_pipeline_simple():
    """Teste simples do pipeline com 3 organiza√ß√µes"""
    
    print("üöÄ Testando Pipeline Principal")
    print("=" * 50)
    print()
    print("O QUE estamos testando:")
    print("- Pipeline que conecta busca ‚Üí extra√ß√£o ‚Üí classifica√ß√£o")
    print("- Tratamento de erros sem parar o processo")
    print("- Estat√≠sticas e logs detalhados")
    print()
    
    # Organiza√ß√µes para teste (mix de seguradoras e n√£o-seguradoras)
    test_orgs = [
        "Allianz SE",           # Seguradora alem√£ famosa
        "Microsoft Corporation", # Empresa de tecnologia
        "Swiss Re"              # Resseguradora su√≠√ßa
    ]
    
    print(f"üìã Testando com {len(test_orgs)} organiza√ß√µes:")
    for i, org in enumerate(test_orgs, 1):
        print(f"  {i}. {org}")
    print()
    
    # Inicializar pipeline
    processor = MainProcessor()
    
    # Processar organiza√ß√µes
    results = processor.process_organization_list(test_orgs)
    
    # Mostrar resumo
    print("\nüéØ RESUMO DOS RESULTADOS:")
    print("-" * 30)
    
    for result in results:
        org = result['organization_name']
        
        if result['success']:
            classification = "üè¢ SEGURADORA" if result['is_insurance'] else "üè≠ N√ÉO-SEGURADORA"
            time_taken = result['total_time_seconds']
            method = result['search_method']
            source_type = result.get('content_source_type', 'unknown')
            content_length = len(result.get('website_content', ''))
            
            print(f"‚úÖ {org}")
            print(f"   ‚Üí {classification}")
            print(f"   ‚Üí Website encontrado via: {method}")
            print(f"   ‚Üí Conte√∫do extra√≠do de: {source_type} ({content_length} caracteres)")
            print(f"   ‚Üí Tempo total: {time_taken:.1f}s")
            print()
        else:
            error_stage = result['error_stage']
            error_msg = result['error_message']
            
            print(f"‚ùå {org}")
            print(f"   ‚Üí FALHA na etapa: {error_stage}")
            print(f"   ‚Üí Erro: {error_msg}")
            print()


if __name__ == "__main__":
    test_pipeline_simple()