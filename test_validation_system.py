#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Teste do Sistema de Valida√ß√£o
"""

import sys
from pathlib import Path

# Adicionar src ao path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from testing.test_dataset_validator import TestDatasetValidator

def test_validation_system():
    """Teste do sistema de valida√ß√£o"""
    
    print("üß™ TESTANDO SISTEMA DE VALIDA√á√ÉO")
    print("=" * 60)
    
    try:
        # Inicializar validator
        validator = TestDatasetValidator()
        
        print("‚úÖ Validator inicializado com sucesso")
        print(f"üìã Organiza√ß√µes conhecidas: {len(validator.known_organizations)}")
        
        # Mostrar organiza√ß√µes conhecidas
        print("\nüìä ORGANIZA√á√ïES CONHECIDAS:")
        insurance_count = 0
        for org in validator.known_organizations:
            status = "‚úÖ Insurance" if org['expected_classification'] else "‚ùå Not Insurance"
            print(f"   {org['name']} ({org['category']}) - {status}")
            if org['expected_classification']:
                insurance_count += 1
        
        print(f"\n   Total: {len(validator.known_organizations)} ({insurance_count} insurance, {len(validator.known_organizations) - insurance_count} non-insurance)")
        
        # Testar extra√ß√£o de organiza√ß√µes aleat√≥rias
        print("\nüé≤ TESTANDO EXTRA√á√ÉO DE ORGANIZA√á√ïES ALEAT√ìRIAS:")
        random_orgs = validator.get_random_organizations_from_dataset(5)
        
        if random_orgs:
            print(f"‚úÖ {len(random_orgs)} organiza√ß√µes aleat√≥rias extra√≠das:")
            for org in random_orgs[:5]:
                print(f"   - {org['name']} (from {org.get('source_sheet', 'unknown')})")
        else:
            print("‚ùå Falha na extra√ß√£o de organiza√ß√µes aleat√≥rias")
        
        # Testar pipeline em uma organiza√ß√£o conhecida
        print("\nüîÑ TESTANDO PIPELINE COMPLETO:")
        test_org = validator.known_organizations[0]  # Allianz SE
        print(f"Testando com: {test_org['name']}")
        
        result = validator.run_complete_pipeline_test(test_org)
        
        print(f"\nüìä RESULTADO DO TESTE:")
        print(f"   Organiza√ß√£o: {result['organization']}")
        print(f"   Pipeline success: {'‚úÖ' if result['pipeline_success'] else '‚ùå'}")
        print(f"   Classifica√ß√£o final: {'‚úÖ Insurance' if result['final_classification'] else '‚ùå Not Insurance' if result['final_classification'] is False else '‚ö†Ô∏è Failed'}")
        print(f"   Tempo total: {result['total_time']:.2f}s")
        
        # Mostrar resultados por stage
        print(f"\nüîÑ RESULTADOS POR STAGE:")
        for stage_name, stage_data in result['stages'].items():
            status = "‚úÖ" if stage_data.get('success', False) else "‚ùå"
            time_info = f" ({stage_data.get('time_seconds', 0):.2f}s)" if 'time_seconds' in stage_data else ""
            print(f"   {stage_name}: {status}{time_info}")
            
            # Informa√ß√µes espec√≠ficas por stage
            if stage_name == 'web_search' and stage_data.get('success'):
                print(f"      URL: {stage_data.get('url_found')}")
                print(f"      Method: {stage_data.get('search_method')}")
            elif stage_name == 'content_extraction' and stage_data.get('success'):
                print(f"      Content length: {stage_data.get('content_length')} chars")
                print(f"      Content type: {stage_data.get('content_type')}")
        
        # Mostrar erros se houver
        if result['errors']:
            print(f"\n‚ö†Ô∏è ERROS ENCONTRADOS:")
            for error in result['errors']:
                print(f"   - {error}")
        
        # Validar se classifica√ß√£o est√° correta
        if result['expected_classification'] is not None and result['final_classification'] is not None:
            is_correct = result['final_classification'] == result['expected_classification']
            print(f"\nüéØ VALIDA√á√ÉO:")
            print(f"   Esperado: {'Insurance' if result['expected_classification'] else 'Not Insurance'}")
            print(f"   Obtido: {'Insurance' if result['final_classification'] else 'Not Insurance'}")
            print(f"   Correto: {'‚úÖ Sim' if is_correct else '‚ùå N√£o'}")
        
        print("\n" + "=" * 60)
        print("üìã PR√ìXIMOS PASSOS:")
        print("1. Execute 'python src/testing/test_dataset_validator.py' para valida√ß√£o completa")
        print("2. Verifique os resultados em 'test_results/' ap√≥s execu√ß√£o")
        print("3. Ajuste prompts/thresholds baseado nos resultados")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO NO TESTE: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_validation_system()
    if success:
        print("\n‚úÖ TESTE DO SISTEMA DE VALIDA√á√ÉO PASSOU!")
    else:
        print("\n‚ùå TESTE DO SISTEMA DE VALIDA√á√ÉO FALHOU!")